show databases;
use coach_db;

#CREATING TABLE PRODUCT

CREATE TABLE PRODUCT(
PRODID INTEGER PRIMARY KEY,
PRODESC VARCHAR(50),
PRICE DECIMAL(10,2),
STOCK INTEGER);

#CREATING TABLE PURCHASE 

CREATE TABLE PURCHASE(
PURID INTEGER PRIMARY KEY,
PROID INTEGER,
QTY INTEGER,
SUPPLIERNAME VARCHAR(50),FOREIGN KEY (PROID) REFERENCES PRODUCT(PRODID));

#CREATING TABLE SALES 

CREATE TABLE SALES(
SALEID VARCHAR(10) PRIMARY KEY,
PROID INTEGER,
QTY INTEGER,
CUSTNAME VARCHAR(50),
FOREIGN KEY(PROID) REFERENCES PRODUCT(PRODID)
);

#INSERTING INTO TABLE PRODUCT

INSERT INTO PRODUCT VALUES(1,'PRODUCT A',10.99,100),
(2,'PRODUCT B',25.50,50),
(3,'PRODUCT C',5.99,200),
(4,'PRODUCT D',15.75,75)
;

#INSERTING INTO TABLE PURCHASE

INSERT INTO PURCHASE VALUES(1,1,20,'SUPPLIER A'),
(2,2,10,'SUPPLIER B'),
(3,3,50,'SUPPLIER C'),
(4,4,5,'SUPPLIER D')
;

#INSERT INTO SALES

INSERT INTO SALES VALUES('S1',1,5,'CUSTOMER A'),
('S2',3,15,'CUSTOMER B'),
('S3',2,2,'CUSTOMER C'),
('S4',4,10,'CUSTOMER D'),
('S5',1,2,'CUSTOMER E')
;

#ALTERING TABLE USING CONSTARINTS

ALTER TABLE SALES ADD CONSTRAINT CHK_SALEID CHECK(SALEID LIKE 'S%');

#QUERY TO DISPLAY PRODUCT_ID FOR MORE THAN 5 TIMES 

SELECT PROID FROM PURCHASE GROUP BY PROID HAVING SUM(QTY)>5;

#CREATING VIEW 

CREATE VIEW PURCHASEDETAILS AS SELECT P.PRODID,P.PRICE,U.PURID,U.QTY,S.CUSTNAME FROM PRODUCT P JOIN PURCHASE U ON P.PRODID=U.PROID
JOIN SALES S ON P.PRODID=S.PROID;

#CREATING SEQUENCE 

/*CREATE SEQUENCE sequence_name
START WITH initial_value
INCREMENT BY increment_value
MINVALUE minimum value
MAXVALUE maximum value
CYCLE|NOCYCLE ;*/

#create procedure
DELIMITER &&  
CREATE PROCEDURE Product_Purchase(IN purchase_id INT)
BEGIN
	SELECT p.Prodesc,pp.qty,p.Price
    FROM Purchase pp
    JOIN Product p ON pp.Proid-p.Prodid
    WHERE pp.Purid=purchase_id;
END&&
DELIMITER &&
